{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Shivansh%20Rana/Desktop/DTU%20Academic/Codes/WEBD/SIH25008/frontend/src/app/api/auth/register/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\r\n\r\nexport async function POST(request) {\r\n  try {\r\n    // Since we're using FormData in the frontend\r\n    const formData = await request.formData();\r\n    \r\n    // Call the backend API to register\r\n    const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/auth/register`, {\r\n      method: 'POST',\r\n      body: formData,\r\n    });\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (!response.ok) {\r\n      return NextResponse.json(\r\n        { message: data.message || 'Registration failed' },\r\n        { status: response.status }\r\n      );\r\n    }\r\n    \r\n    // Return the response from the backend\r\n    return NextResponse.json(data);\r\n  } catch (error) {\r\n    console.error('Registration error:', error);\r\n    return NextResponse.json(\r\n      { message: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":";;;;AAAA;;AAEO,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,6CAA6C;QAC7C,MAAM,WAAW,MAAM,QAAQ,QAAQ;QAEvC,mCAAmC;QACnC,MAAM,WAAW,MAAM,MAAM,6DAAmC,kBAAkB,CAAC,EAAE;YACnF,QAAQ;YACR,MAAM;QACR;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,SAAS,KAAK,OAAO,IAAI;YAAsB,GACjD;gBAAE,QAAQ,SAAS,MAAM;YAAC;QAE9B;QAEA,uCAAuC;QACvC,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAwB,GACnC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}